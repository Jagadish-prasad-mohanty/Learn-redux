*How react pass the data?
    - Normally the react pass the data by storing the data in state tehn passing by props.
    - but it is unidirectional. means on ly parent can provide the data to the children compoennts.
    - So there is a concept of prop driling in which we can pass the data one one component but it is a tedious process.

    - In react hook:
        Context API and use content:
            - Simply we have to store data in the provider and then we have to wrap the app with that and then access any where in the programm through consumer.

    - Redux:
        Simply we have a store in which we have to store data and tehn any of the component which need the daat then we can provide data from the store.

    
Redux:
    - Reudx is a predictable state container for the react.
    -Redux is a pattern and library for mannaging and updating the applicatuon state, using events called 'action' .
    - It serves as centralized store for state that needs to be used accross your entire application, with rules ensuring that the state can only be updated in a predicatable fashion(which component call and how it update).

    *Main topic:
        - Action 
            - What to do?
            -Plain javascript object having a type field and payload
            - Type specifies the action name and the playload provide teh data for the same.
            Ex:
                return{
                    type:INCREMENT,
                    payload: num(5)
                }

            * Action creator
                -We can create the action through the action creator.
                -EX:
                    const incsNumber = (num) =>{
                        return {
                            type:INCREMENT,
                            payload: num
                        }
                    }
        - Reducer
            - How to do
            - It is bassicaly a function that will take current state and an action as argument and return a new state result.
            - ex:
                const intitialState=0
                const changeTheNumber =(state=intitialState,action)=>{
                    switch(action.type){
                        case "INCREMENT":
                            return state+action.payload
                        default:
                        return state
                    }
                }

        - Store
            - object which holds the state of the application
            -  This brings together all state,actions, reducer and make up your app.
            - you will ahve only a single store in a resux
            every redux store has a singke reducer function
            -EX:
                import {createStore} from 'redux'
                const store=createStore(rootReducer,window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());
        - (function associated with store)
            - crateStore()
            - diaptch(action)
            - getState()

        * state to props
            const mapStateToProps=(state)=>{
                return {
                    counter:state.reducer_name.nameOfKeyInStateReducer
                }
                }

        * dispathing:
            const mapDispatchToProps= (dispatch) =>{
                return{
                    increment: ()=>dispatch(actionCreators.incCounter()),
                    decrement: () => dispatch(actionCreators.decCounter()),
                    value: (e) => dispatch(actionCreators.addValue(e))
                }
                }

            - we can use the increment ,decrement and value(e) as the function in to change state.

        * connect redux store to app:
            <Provider store={store}>
                <App />
            </Provider>

        * connect all the things like reducer to app or react to redux
            import {connect} from 'react-redux'
            export default connect(mapStateToProps,mapDispatchToProps)(App);





